# -*- coding: utf-8 -*-
"""data analyst - bike sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H7M07Z0a9byDWs1c2gA9tgUC1QGspdus

# **ANALISIS DATA: STUDI KASUS (BIKE SHARING DATASET)**

----

Nama: Fauziah Reza Oktaviyani

Email: fzhokta@gmail.com

---
Data yang digunakan dapat diakses pada link [bike sharing dataset-kaggle](https://www.kaggle.com/datasets/lakshmi25npathi/bike-sharing-dataset/data)

Data tersebut memiliki beberapa atribut:
*   instant: indeks tiap entri data
*   dteday: tanggal saat data diambil
*   season: musim (1: musim semi, 2: musim panas, 3: musim gugur, 4: musim dingin
*   yr: tahun (0: 2011, 1: 2012)
*   mnth: bulan (1 hingga 12)
*   hr: jam (0 hingga 23)
*   holiday: apakah data diambil ketika holiday atau tidak
*   weekday: hari dalam seminggu saat data diambil
*   workingday: hari kerja
*   weathersit: kondisi cuaca
    *  1: Cerah, Sedikit awan, Sebagian berawan, Sebagian berawan
    *  2: Kabut + Mendung, Kabut + Awan pecah, Kabut + Sebagian awan, Kabut
    *  3: Salju Ringan, Hujan Ringan + Badai petir + Awan berkepul-kepul, Hujan Ringan + Awan berkepul-kepul
    *  4: Hujan Lebat + Es butiran + Badai petir + Kabut, Salju + Kabut
*   temp: Suhu yang dinormalisasi dalam derajat Celsius
*   atemp: Suhu perasaan yang dinormalisasi dalam derajat Celsius
*   hum: Kelembaban yang dinormalisasi
*   windspeed: Kecepatan angin yang dinormalisasi
*   casual: Jumlah pengguna kasual
*   registered: Jumlah pengguna terdaftar
*   cnt: Jumlah total sepeda yang disewakan

---
# **Menentukan Pertanyaan Bisnis**

1.   Bagaimana pengaruh cuaca terhadap permintaan sepeda?
2.   Bagaimana variasi musiman dalam penggunaan sepeda?
3.   Bagaimana pengaruh hari libur terhadap penggunaan sepeda?
4.   Bagaimana perbandingan penggunaan sepeda oleh pengguna terdaftar dan kasual?

# **1. Persiapan Library**

disini saya menggunakan library:
*   `numpy` untuk melakukan operasi matematika, statistik, dsb.
*   `pandas` untuk membaca, manipulasi, analisis, simpan data dalam bentuk tabel
*   `matplotlib.pyplot` untuk membuat visualisasi grafil, plot, atau gambar
*   `seaborn` untuk membuat visualisasi data yang lebih menarik
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# **2. Data Wrangling**

## **2.1 Gathering Data**

Baca file data yang disimpan dalam format .csv serta dimuat ke dalam bentuk dataFrame menggunakan `pandas`
"""

bike_hour_df = pd.read_csv("/content/drive/MyDrive/Data Analyst/Data/hour.csv")
bike_hour_df.head()

bike_day_df = pd.read_csv("/content/drive/MyDrive/Data Analyst/Data/day.csv")
bike_day_df.head()

"""## **2.2 Assessing Data**

### 2.2.1 Periksa informasi dari data
"""

print("==== data per jam ====")
bike_hour_df.info()
print("\n")
print("==== data per hari ====")
bike_day_df.info()

"""Terlihat pada informasi di atas bahwa `bike_hour_df` memiliki 17 kolom dengan jumlah barisnya 17379 yang bernilai non-null, serta tipe data `int64` sebanyak 12, `float64` sebanyak 4, dan `object` 1, sedangkan `bike_day_df` memiliki 16 kolom dengan jumlah barisnya 731 yang bernilai non-null, serta tipe data `int64` sebanyak 11, `float64` sebanyak 4, dan `object` 1.

Setelah mengetahui informasi tersebut, didapatkan beberapa kesalahan pada tipe data atribut `dteday` yang seharusnya bertipe data `datetime64`

### 2.2.2 Cek missing value
"""

bike_hour_df.isna().sum()

bike_day_df.isna().sum()

"""Berdasarkan informasi diatas, dapat dilihat bahwa tidak ada *missing value* pada masing-masing data

### 2.2.3 Cek duplikasi data
"""

print("Jumlah duplikasi pada data rental per jam: ", bike_hour_df.duplicated().sum())
print("Jumlah duplikasi pada data rental per hari: ", bike_day_df.duplicated().sum())

"""Berdasarkan informasi di atas, dapat dilihat bahwa tidak ada data yang duplikat

### 2.2.4 Periksa parameter statistik dari kolom numerik
"""

bike_hour_df.describe()

bike_day_df.describe()

"""Bisa dilihat pada informasi parameter statistik di atas bahwa parameter statistik pada tiap data sudah sesuai dengan atribut masing-masing

## **2.3 Data Cleaning**

Data cleaning dilakukan untuk memperbaiki tipe data dari atribut `dteday` yang awalnya bertipe `object` menjadi `datetime64`. Proses ini dapat dilakukan menggunakan `function to_datetime()` yang disediakan oleh library `pandas`
"""

bike_day_df.dteday = pd.to_datetime(bike_day_df.dteday)
bike_hour_df.dteday = pd.to_datetime(bike_hour_df.dteday)

"""Setelah itu saya lakukan pengecekan lagi untuk memastikan bahwa tipe data sudah berubah"""

bike_day_df.info()
bike_hour_df.info()

"""# **3. Exploratory Data Analysis (EDA)**

Pada data yang saya gunakan terdapat keterangan pada masing-masing atribut yang dapat dilihat pada tabel di bawah:

|  Kolom Data  | Keterangan |
|--------------|------------|
| `season`     | Telah diubah dari data berjenis *string* menjadi data numerik melalui proses *label encoding*. |
| `yr`         | Telah diubah menjadi data numerik dengan urutan tahun melalui proses *ordinal encoding*. |
| `holiday`    | Telah diubah dari data bertipe *string* menjadi nilai *boolean* melalui proses *binary encoding*. |
| `weekday`    | Telah diubah menjadi data numerik dengan urutan hari melalui proses *ordinal encoding*. |
| `workingday` | Telah diubah dari data bertipe *string* menjadi nilai *boolean* melalui proses *label encoding*. |
| `weathersit` | Telah diubah dari tingkatan jenis cuaca yang awalnya bertipe *string* menjadi data numerik melalui proses *ordinal encoding*. |
| temp, atemp, hum, dan windspeed     | Telah mengalami normalisasi dengan pembagian nilainya menjadi nilai maksimum yang telah ditentukan. |

## **3.1 Pengembalian Nilai Atribut**
"""

bike_hour_df.describe(include="all")

"""Seperti yang terlihat di atas dan berdasar keterangan yang di dapat bahwa data sudah melalui tahap `label` dan `ordinal decoding`. Oleh karena itu perlu mengembalikan nilai aslinya, tapi sebelum itu perlu menyalin dataset dulu agar data yang asli tetap terjaga."""

backup_day_df = bike_day_df.copy(deep=True)
backup_hour_df = bike_hour_df.copy(deep=True)

bike_day_df.replace({
    'season': {1: 'Springer', 2: 'Summer', 3: 'Fall', 4: 'Winter'},
    'yr': {0: 2011, 1: 2012},
    'mnth' : {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'Mei',6:'Jun',
             7:'Jul',8:'Agt',9:'Sept',10:'Okt',11:'Nov',12:'Des'},
    'holiday': {0: 'Not Holiday', 1: 'Holiday'},
    'workingday': {0: 'Holiday', 1: 'Working Day'},
    'weekday': {
        0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
    },
    'weathersit': {
        1: 'Clear', 2: 'Mist + Cloudy', 3: 'Light Snow', 4: 'Heavy Rain'
    }
}, inplace=True)

bike_hour_df.replace({
    'season': {1: 'Springer', 2: 'Summer', 3: 'Fall', 4: 'Winter'},
    'yr': {0: 2011, 1: 2012},
    'mnth' : {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'Mei',6:'Jun',
              7:'Jul',8:'Agt',9:'Sept',10:'Okt',11:'Nov',12:'Des'},
    'holiday': {0: 'Holiday', 1: 'Not Holiday'},
    'workingday': {0: 'Holiday', 1: 'Working Day'},
    'weekday': {
        0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
    },
    'weathersit': {
        1: 'Clear', 2: 'Mist + Cloudy', 3: 'Light Snow', 4: 'Heavy Rain'
    }
}, inplace=True)

columns_to_check = ['season', 'yr', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']

print('bike_day_df Unique Value')
for column in columns_to_check:
    unique_values = bike_day_df[column].unique()
    print(f'{column}: {unique_values}')

print('\nbike_hour_df Unique Value')
for column in columns_to_check:
    unique_values = bike_hour_df[column].unique()
    print(f'{column}: {unique_values}')

bike_day_df.head()

bike_hour_df.head()

"""## **3.2 Periksa Distribusi Data**"""

columns_to_count = ['season', 'yr', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']
print('bike_day_df Data Distribution\n')

for column in columns_to_count:
    print(f"{bike_day_df[column].value_counts().sort_index()}\n")

columns_to_count = ['season', 'yr', 'mnth', 'holiday', 'workingday', 'weekday', 'weathersit']
print('bike_hour_df Data Distribution\n')

for column in columns_to_count:
    print(f"{bike_hour_df[column].value_counts().sort_index()}\n")

num_day_df = bike_day_df[['temp', 'atemp', 'hum', 'windspeed']]
num_day_df.hist(bins=15, figsize=(10, 7))

num_hour_df = bike_hour_df[['temp', 'atemp', 'hum', 'windspeed']]
num_hour_df.hist(bins=15, figsize=(10, 7))

"""## **3.2 Explore bike_day_df**"""

bike_day_df.groupby(by="weathersit").agg({
    'registered':['mean','max','min'],
    'casual':['mean','max','min']
})

bike_day_df.groupby(by="season").agg({
    'registered':['mean','max','min'],
    'casual':['mean','max','min']
})

bike_day_df.groupby(by="holiday").agg({
    'registered':['mean','max','min'],
    'casual':['mean','max','min']
})

bike_day_df.groupby(by="mnth").agg({
    'registered':['mean','max','min'],
    'casual':['mean','max','min']
})

"""## **3.3 Explore bike_hour_df**"""

bike_hour_df.groupby(by="weathersit").agg({
    'registered':['mean','max','min'],
    'casual':['mean','max','min']
})

"""# **4. Visualization & Explanatory Analysis**

## **Q1 : Berapa banyak orang yang menyewa sepeda, per jam, hari, bulan, dan tahun?**

### Per Jam
"""

total_sewa_per_jam = bike_hour_df.groupby('hr')['cnt'].nunique().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

plt.figure(figsize=(8, 4))
sns.barplot(x='hr', y='Total Sewa Sepeda', data=total_sewa_per_jam)
plt.title('Total Sewa Sepeda per Jam')
plt.xlabel('Jam')
plt.ylabel('Total Sewa Sepeda')
plt.show()

total_sewa_per_hari = bike_day_df.groupby('weekday')['cnt'].nunique().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

plt.figure(figsize=(8, 4))
sns.barplot(x='weekday', y='Total Sewa Sepeda', data=total_sewa_per_hari)
plt.title('Total Sewa Sepeda per Hari')
plt.xlabel('Hari')
plt.ylabel('Total Sewa Sepeda')
plt.show()

"""### Per Bulan"""

total_sewa_per_bulan = bike_day_df.groupby('mnth')['cnt'].nunique().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

plt.figure(figsize=(8, 4))
sns.barplot(x='mnth', y='Total Sewa Sepeda', data=total_sewa_per_bulan)
plt.title('Total Sewa Sepeda per bulan')
plt.xlabel('Bulan')
plt.ylabel('Total Sewa Sepeda')
plt.show()

"""### Per Tahun"""

total_sewa_per_tahun = bike_day_df.groupby('yr')['cnt'].nunique().reset_index().rename(columns={'cnt': 'Total Sewa Sepeda'})

plt.figure(figsize=(8, 4))
sns.barplot(x='yr', y='Total Sewa Sepeda', data=total_sewa_per_tahun)
plt.title('Total Sewa Sepeda per tahun')
plt.xlabel('Tahun')
plt.ylabel('Total Sewa Sepeda')
plt.show()

"""## **Q2 : Apakah cuaca buruk mengurangi jumlah peminjaman?**

berikut ini merupakan visualisasi dampak tiap bulan
"""

cuaca_vs_permintaan_day = bike_day_df.groupby('weathersit')['cnt'].mean().sort_values(ascending=False).reset_index()

plt.figure(figsize=(8, 5))
sns.barplot(x='weathersit', y='cnt', data=cuaca_vs_permintaan_day)
plt.title('Pengaruh Cuaca Buruk Terhadap Permintaan Sepeda per Hari')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.xticks([0, 1, 2, 3], ['Clear', 'Mist + Cloudy', 'Light Snow', 'Heavy Rain'])
plt.show()

"""## **Q3 : Apakah ada peningkatan yang konsisten pada musim tertentu?**"""

rentals_per_season = bike_day_df.groupby('season')['cnt'].nunique().reset_index()
rentals_per_season.rename(columns={'cnt': 'sum'}, inplace=True)
rentals_per_season

plt.figure(figsize=(8, 5))
sns.barplot(x='season', y='sum', data=rentals_per_season)
plt.title('Tren Musiman dalam Penggunaan Sepeda berdasarkan Musim')
plt.xlabel('Musim')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.show()

"""## **Q4 : Apakah ada peningkatan atau penurunan yang signifikan selama hari libur?**"""

average_rentals_on_holiday = bike_day_df.groupby('holiday')['cnt'].mean().reset_index()

plt.figure(figsize=(8, 5))
sns.barplot(x='holiday', y='cnt', data=average_rentals_on_holiday)
plt.title('Pengaruh Hari Libur Terhadap Penggunaan Sepeda')
plt.xlabel('Hari Libur')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.show()

"""## **Q5 : Apa perbandingan antara pengguna terdaftar dan pengguna kasual dalam penggunaan sepeda?**"""

perbandingan_pengguna = bike_hour_df.groupby(['hr', 'yr'])[['registered', 'casual']].mean().reset_index()
print(perbandingan_pengguna)

plt.figure(figsize=(8, 5))
sns.lineplot(x='hr', y='registered', data=perbandingan_pengguna, label='Terdaftar')
sns.lineplot(x='hr', y='casual', data=perbandingan_pengguna, label='Kasual')
plt.title('Perbandingan Penggunaan Sepeda oleh Pengguna Terdaftar dan Kasual')
plt.xlabel('Jam (per Jam)')
plt.ylabel('Rata-rata Permintaan Sepeda')
plt.legend(title='Tipe Pengguna')
plt.show()

"""# **5. Conclusion**

### Bagaimana pengaruh cuaca terhadap permintaan sepeda?
>  Dalam eksplorasi data sebelumnya, **saya melihat bahwa rata-rata permintaan sepeda tertinggi terjadi pada hari dengan cuaca yang baik.** Hal ini menunjukkan bahwa cuaca cerah cenderung meningkatkan minat orang untuk menggunakan sepeda. Cuaca yang baik memberikan pengalaman berkendara yang lebih nyaman dan aman, yang mungkin menjadi alasan mengapa permintaan sepeda lebih tinggi pada hari-hari tersebut.

### Bagaimana variasi musiman dalam penggunaan sepeda?
> Berdasarkan data musim yang telah disediakan, dapat disimpulkan bahwa **puncak permintaan sepeda terjadi selama musim gugur (Fall).** Hal ini mungkin disebabkan oleh cuaca yang lebih nyaman dan aktivitas luar ruangan yang populer selama musim gugur.

### Bagaimana pengaruh hari libur terhadap penggunaan sepeda?
> Berdasarkan eksplorasi data, **saya dapat menyimpulkan bahwa penggunaan sepeda cenderung lebih tinggi pada hari-hari yang bukan merupakan hari libur.** Ini menunjukkan bahwa orang-orang lebih cenderung menggunakan sepeda sebagai alat transportasi pada hari kerja atau hari-hari biasa daripada pada hari libur. Variasi ini dalam penggunaan sepeda dapat memengaruhi kebijakan penyedia layanan sepeda, seperti jumlah sepeda yang tersedia atau penawaran promosi selama hari-hari kerja untuk meningkatkan penggunaan sepeda.

### Bagaimana perbandingan penggunaan sepeda oleh pengguna terdaftar dan kasual?
>  **Pengguna terdaftar cenderung lebih aktif dan konsisten dalam sewa sepeda.** Perbedaan ini bisa mengindikasikan bahwa pengguna terdaftar mungkin merupakan pengguna yang lebih terjadwal dan rutin dalam penggunaan layanan sepeda, sementara pengguna kasual lebih cenderung menggunakan sepeda secara sporadis atau mungkin sebagai wisatawan pada waktu tertentu.

### Bagaimana perbandingan penggunaan sepeda oleh pengguna terdaftar dan kasual?
>  Terdapat hubungan positif antara suhu (temp) dan jumlah penggunaan bike sharing, demikian pula dengan suhu rata-rata (atemp) dan jumlah penggunaan bike sharing. Selain itu, kelembapan (hum) juga memengaruhi jumlah penggunaan bike sharing ketika berada dalam rentang 40-85%, sedangkan kecepatan angin (windspeed) memiliki dampak pada jumlah penggunaan bike sharing ketika kecepatannya berada dalam rentang 3-20 knot.

# **5. Ekspor Data**
"""

data_clean = 'data_day.csv'
bike_day_df.to_csv(data_clean, index=False)

from google.colab import files
files.download(data_clean)